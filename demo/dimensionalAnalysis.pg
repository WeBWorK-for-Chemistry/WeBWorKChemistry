
##############################################

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "PGcourse.pl",
  "answerHints.pl",
  "niceTables.pl",
  "parserPopUp.pl",
  #"contextScientificNotation.pl",
  "contextInexactValue.pl",
  "parserNumberWithUnits.pl",
  "parserInexactValueWithUnits.pl"

);

HEADER_TEXT(<<EOF);
  <style>
  .conversionEQ {
    display: flex;
    align-items: center;
  }
  .conversionEQ > div {
    text-align: center;
  }
  .conversionFractionBar {
  line-height: 1px;
  width: 100%;
  border-bottom: 1px solid black;
  }
  .conversionEQmath {
    padding: 1em;
  }
  </style>  
EOF

##############################################

sub conversionEQ {
  my $start = shift;
  my $colsref = shift;
  my $n = scalar @{$colsref};
  my $end = shift;
  my $html;
  $html .= '<div class="conversionEQ">';
    $html .= '<div>';
      $html .= $start;
    $html .= '</div>';
    for my $i (0..$n-1) {
      $html .= '<div class="conversionEQmath">';
         $html .= math_ev3('\times');
      $html .= '</div>';
      $html .= '<div class="conversionEQcol">';
         $html .= '<div>';
             $html .= $colsref->[$i][0];
         $html .= '</div>';       
         $html .= '<div class="conversionFractionBar">';
             $html .= '<svg height="1" width="40">';
                 $html .= '<desc>per</desc>';
             $html .= '</svg>';
         $html .= '</div>';       
         $html .= '<div>';
             $html .= $colsref->[$i][1];
         $html .= '</div>';       
      $html .= '</div>';
  }
  $html .= '<div  class="conversionEQmath">';
      $html .= math_ev3('{}={}');
  $html .= '</div>';
  $html .= '<div>';
      $html .= $end;
  $html .= '</div>';
  $html .= '</div>';
  MODES(HTML=>$html);
}

Context("Numeric");

$m = list_random(26.5, 32.5, 17.3, 11.4, 10.6, 41.7);

@factor = ( "km", "cm", "m", "mm");

$b1 = 1;
$b2 = 1000;
$b3 = 1;
$b4 = 1000;

Context("InexactValueWithUnits");

# Context()->flags->set(snDigits=>2);

# $a = $m*$b1/$b2*$b3/$b4;

# $ans = InexactValue("$a");

# $newUnit = {name=>'yd',conversion=>{factor=>0.9144,m=>1}};

 $given = InexactValueWithUnits('3.0', 'mi/hr');
 $convs = [
   [InexactValueWithUnits(['1', 9**9**9], 'mi'),InexactValueWithUnits(['3', 9**9**9], 'ft')],
   [InexactValueWithUnits(60, 'min'),InexactValueWithUnits(1, 'hr')]
 ];
 $answer = InexactValueWithUnits('60','m/s');


$answerInexact = InexactValueWithUnits('62.10', 'm/s');

# $testold = $given*$given;

$test = InexactValueWithUnits('3.1', 'ft');
$test2 = InexactValueWithUnits('4.21', 'feet');
$testAdd = $test + $test2;

$testSub = $test - $test2;

$testMult = $test * $test2;

$test3 = InexactValueWithUnits('3.1', 'kg*m^2');
$test4 = InexactValueWithUnits('4.21', 'm^2');
$testDiv = $test3 / $test4;

$test5 = InexactValueWithUnits('7.000', 'kg*m^2');
$test6 = InexactValueWithUnits('2.000', 'kg*m^2');
$testUnitless = $test5 / $test6;

# $test5 = InexactValueWithUnits('4.00', 'ft/s');

#$result = $answerInexact->cmp_parse;

# %result= Units::evaluate_units($test3->{units});
# $debug='';
# # $units = $self->{units_ref};
#   foreach $key (keys %result) {
#     $debug = $debug . "$key => $result{$key}\n";
#   }
        
##############################################

TEXT(beginproblem());

#BEGIN_PGML
#
#Using the following equality, create the correct conversion factor using the drop down menus and solve the problem below:
#
#*[$b1] kilometers = [$b2] meters*
#
#*[$b3] meter = [$b4] millimeters*
#
#Convert [$m] mm to kilometers.
#
#
#[@ LayoutTable(
#  [
#    [' ',PGML('[___]{$b1}[_]{$popa}'),' ',PGML('[___]{$b3}[_]{$popb}'),' '],
#    [PGML('[$m] mm x '),PGML('----'),PGML('x'),PGML('----'), PGML(' = [_______]{$ans}[_]{$pope}')],
#    [' ', PGML('[___]{$b2}[_]{$popc}'),' ',PGML('[___]{$b4}[_]{$popd}'),' ']
#  ], 
#  align => 'X X X X X',
#  center => 0,
#  )
#@]* 

#[@conversionEQ($given,[[ans_rule(10),ans_rule(10)],[ans_rule(10),ans_rule(10)]],ans_rule(10));@]*
#[________]{$answerInexact}
#[$result->{ans_hash}]

BEGIN_PGML

[@conversionEQ($given,[[ans_rule(10),ans_rule(10)],[ans_rule(10),ans_rule(10)]],ans_rule(10));@]*

[$answerInexact]

[`[$answerInexact]`]

[_________]

[`[$test] + [$test2] = [$testAdd]`] 

[`[$test] - [$test2] = [$testSub]`] 

[`[$test] \times [$test2] = [$testMult]`] 

[`\frac{[$test3]}{[$test4]} = [$testDiv]`] 

[`\frac{[$test5]}{[$test6]} = [$testUnitless]`] 

 
END_PGML
#[________]{$answerInexact}
# if (Parser::Legacy::InexactValueWithUnits::compareUnitHash($correct->{units_ref}, $student->{units_ref}) {
# }

for my $i (0,1) {
  for my $j (0,1) {
    ANS($convs->[$i][$j]->cmp->withPostFilter(sub {
      my $ans = shift;
      if ($ans->{score}) {
        my $correct = $ans->{correct_value};
        my $student = $ans->{student_value};
        if ($correct->{units} ne $student->{units}) {
          $ans->{ans_message} = "Your conversion factor equals one, but your units do not cancel correctly";
          $ans->score(0);
        }
      }
      return $ans;
    }));
  }
}

ANS($answer->cmp->withPostFilter(sub {
  my $ans = shift;
  if ($ans->{score}) {
    my $correct = $ans->{correct_value};
    my $student = $ans->{student_value};
    if ($correct->getUnits() ne $student->getUnits()) {
      $ans->{ans_message} = "Your conversion factor equals one, but your units do not cancel correctly";
      $ans->score(0);
    }
  }
  return $ans;
}));

ANS($answerInexact->cmp);

##############################################
BEGIN_TEXT
$PAR
If you don't get this in $showHint tries, you can get a hint.
END_TEXT

BEGIN_PGML_HINT

The general steps in performing dimensional analysis

1.  Identify the "given" information in the problem. Look for a number with units to start this problem with.
2.  What is the problem asking you to "find"? In other words, what unit will your answer have?
3.  Use ratios and conversion factors to cancel out the units that aren't part of your answer, and leave you with units that are part of your answer.
4.  When your units cancel out correctly, you are ready to do the math. You are multiplying fractions, so you multiply the top numbers and divide by the bottom numbers in the fractions.


For more information on unit conversion, click [@ htmlLink( protect_underbar("https://chem.libretexts.org/Courses/Portland_Community_College/CH104%3A_Allied_Health_Chemistry_I_(Southeast)/2%3A_Measurement_and_Problem_Solving/2.5%3A_Problem_Solving_and_Unit_Conversions"), protect_underbar("here"), "TARGET='_blank'" ); @]*



END_PGML_HINT
##############################################

#BEGIN_PGML_SOLUTION




#END_PGML_SOLUTION

ENDDOCUMENT();


