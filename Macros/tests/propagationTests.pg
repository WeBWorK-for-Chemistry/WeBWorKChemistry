##DESCRIPTION
##  Inexact Value Tests
##ENDDESCRIPTION

##KEYWORDS('chemistry', 'significant', 'figures', 'sigfigs')

## Date('2/15/2021')
## Author('Lee McPherson')
## Institution('Portland Community College')


########################################################################

DOCUMENT();

loadMacros(
	"PGstandard.pl",     # Standard macros for PG language
	"MathObjects.pl",
	"PGML.pl",
	"contextInexactValue.pl"
);

Context("InexactValue")->flags->set(precisionMethod=>"uncertainty");

@data = (
	[[-3.3,0.3], {value=> -3.3, uncertainty=> 0.3, string=>'-3.3 ± 0.3', TeX=>'-3.3 \pm 0.3'}],
	[[2.10e+9,3.2e+8], {value=> 2.1e9, uncertainty=> 3.2e8, string=>'2.10x10^9 ± 0.32x10^9', TeX=>'2.10\times 10^{9} \pm 0.32\times 10^{9}'}],
	[[2.10e-9,3.2e-10], {value=> 2.1e-9, uncertainty=> 3.2e-10, string=>'2.10x10^-9 ± 0.32x10^-9', TeX=>'2.10\times 10^{-9} \pm 0.32\times 10^{-9}'}],
	[[-3.3,0.6], {value=> -3.3, uncertainty=> 0.6, string=>'-3.3 ± 0.6', TeX=>'-3.3 \pm 0.6'}],
	[[-3300,300], {value=> -3300, uncertainty=> 300, string=>'-3300 ± 300', TeX=>'-3300 \pm 300'}],
	[[45,8], {value=> 45, uncertainty=> 8, string=>'45 ± 8', TeX=>'45 \pm 8'}],
	[[4,0.9], {value=> 4, uncertainty=> 0.9, string=>'4.0 ± 0.9', TeX=>'4.0 \pm 0.9'}]

);

$html = '
<style>
table#results {
	border: 1px double black;
	border-collapse: collapse;
	}
table#results th, table#results td {  
	border: 1px solid black;
	border-collapse: collapse;
}
.wrong {
	background:salmon;
}
.unknown{
	background:gray;
}
</style>
<table id="results">
	<tr>
		<th>Input</th>
		<th>Value</th>
		<th>Uncertainty</th>
		<th>String</th>
		<th>TeX</th>
		<th>TeX Raw</th>
		<th>Error</th>
	</tr>
	';

sub hashPrint {
	$hashRef = shift;
	%hash = %$hashRef;
	$output='';
	while(my($k, $v) = each %hash) { 
		$output .= "$k: $v<br/>";
	}
	return $output;
}

foreach $dataItem (@data){
	$success=1;
	$errorMessage='';
	
	$html .= "<tr>";
	$testString = $dataItem->[0];
	$expected = $dataItem->[1];
	
	if (ref($testString) eq 'ARRAY'){
		$testValue = InexactValue($testString->[0], $testString->[1]);
		$testString = '[' . $testString->[0] . ', ' . $testString->[1] . ']';
	} else {
		$testValue = InexactValue($testString);
	}
	
	$html .= "<td>$testString</td>";

	# floating point errors cause == to not work sometimes.  Easier to compare by string equivalent as they both are numbers and should convert to the same.
	if ($expected->{value} eq $testValue->valueAsNumber()){
		$html .= "<td>";
	} else {
		$html .= "<td class='wrong'>";
		$errorMessage .= "Expected value: " . $expected->{value} . "<br/>";
		$success=0;
	}
	$html .= $testValue->valueAsNumber() . "</td>";

	if ($expected->{uncertainty} == $testValue->{uncertainty}){
		$html .= "<td>";
	} else {
		$html .= "<td class='wrong'>";
		$errorMessage .= "Expected value: " . $expected->{uncertainty} . "<br/>";
		$success=0;
	}
	$html .= $testValue->uncertainty() . "</td>";

	$stringA = $expected->{string};
	$stringB = $testValue->string();
	if ($stringA eq $stringB){
		$html .= "<td>";
	} else {
		
		$html .= "<td class='wrong'>";
		$errorMessage .= "Expected value: " . $expected->{string} . "<br/>";
		$success=0;
	}
	$html .=  $testValue->string . "</td>";

	if ($expected->{TeX} eq $testValue->TeX){
		$html .= "<td>";
	} else {
		$html .= "<td class='wrong'>";
		$errorMessage .= "Expected value: " . '$$' . $expected->{TeX} . '$$' . "<br/>";
		$success=0;
	}
	$html .= '$$'. $testValue->TeX . '$$' . "</td>";

	if ($expected->{TeX} eq $testValue->TeX){
		$html .= "<td><pre>";
	} else {
		$html .= "<td class='wrong'><pre>";
		$errorMessage .= "Expected value: " . $expected->{TeX} . "<br/>";
		$success=0;
	}
	$html .=  $testValue->TeX  . "</pre></td>";

	$html .= "<td>";
	if ($success){
		$html .='';
	} else {
		$html .= $errorMessage;
	} 
	$html .= "</td>";
	$html .= "</tr>";
}

$html .= '</table>';

BEGIN_PGML

[$html]***

END_PGML


ENDDOCUMENT();
