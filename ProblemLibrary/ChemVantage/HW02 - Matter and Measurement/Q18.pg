DOCUMENT();

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"PGML.pl",
"contextInexactValue.pl",
"contextInexactValueWithUnits.pl",
"parserDimensionalAnalysis.pl",
"chemQuillMath.pl",
);

Context("InexactValue");
Context()->flags->set(failOnValueWrong=>1);  # must have value correct (no partial credit for getting sig figs only)
Context()->flags->set(creditValue=>0.75);    # 75% credit for correct answer (default is 50%)
Context()->flags->set(creditSigFigs=>0.25);  # 25% credit for sig figs


$val1 = random(1, 9, 0.01); # generate number from 1 to 9 out to hundredths place

$time = InexactValue(sprintf("%.2f", $val1));

@psSecond = InexactValueWithUnits::getConversion('ps', 's');

$answer = $time * $psSecond[0]->{inexactValue} / $psSecond[1]->{inexactValue}; 

BEGIN_PGML
[$time] ps is equal to

 [______]{$answer} s

Enter the exact value.

END_PGML


############################
#  Solution  Using the PG solution below will supersede the solution block in the ADAPT question framework

# Don't require student to enter units for problem above.  However, recreate problem for solution
# using InexactValueWithUnits so that full dimensional analysis is shown.
Context("InexactValueWithUnits");
$timeps = InexactValueWithUnits($time, 'ps');
$answers = $timeps * $psSecond[0] / $psSecond[1]; 
$conversion = DimensionalAnalysis::generateExplanation([$timeps], [$psSecond[0], $psSecond[1]], $answers);
$conversionSf = DimensionalAnalysis::generateSigFigsExplanation([$timeps], [$psSecond[0], $psSecond[1]], $answers);

BEGIN_PGML_SOLUTION

[``` [$conversion] ```]

[$conversionSf]**

END_PGML_SOLUTION

ENDDOCUMENT();