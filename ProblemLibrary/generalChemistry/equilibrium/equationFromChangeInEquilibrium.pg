##DESCRIPTION
##  Rates of Reaction 
##ENDDESCRIPTION

##KEYWORDS('chemistry', 'kinetics', 'arrhenius')

## Date('8/9/2022')
## Author('Lee McPherson')
## Institution('Portland Community College')


########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "PGauxiliaryFunctions.pl",
   "PGML.pl",
   "contextInexactValue.pl",
   "contextInexactValueWithUnits.pl",
   "PGgraphmacros.pl",
   "MathObjects.pl",
   "contextReaction.pl"
);



# Modified graph that has labels at all ticks
sub init_graphEX {
	my ($xmin,$ymin,$xmax,$ymax,%options) = @_;
	my @size;
	if ( defined($options{'size'}) ) {
		@size = @{$options{'size'}};
	}	elsif ( defined($options{'pixels'}) ) {
		@size = @{$options{'pixels'}};
	}   else {
		my $defaultSize = $main::envir{onTheFlyImageSize} || 200;
		@size=($defaultSize,  $defaultSize);
	}

	if(!(defined($options{'plotVerticalAxis'})) ) {
			# Set the default value of whether or not to plot the y axis.
			$options{'plotVerticalAxis'} = 1;
	}

    my $graphRef = new WWPlot(@size);
	# select a  name for this graph based on the user, the psvn and the problem
	$graphRef->imageName($main::PG->getUniqueName($graphRef->ext));

	# Set the initial/default bounds for the graph.
	$graphRef->xmin($xmin) if defined($xmin);
	$graphRef->xmax($xmax) if defined($xmax);
	$graphRef->ymin($ymin) if defined($ymin);
	$graphRef->ymax($ymax) if defined($ymax);
	my $x_delta = ($graphRef->xmax -  $graphRef->xmin)/8;
	my $y_delta = ($graphRef->ymax -  $graphRef->ymin)/8;

	# Set the initial/default bounds for the placement of the axes
	my $horizontalAxisLevel = 0.0;
	my $verticalAxisLevel = 0.0;
	if ($options{axes}) {   #   draw axis
	    my $ra_axes = $options{axes};
			$graphRef->h_axis($ra_axes->[1],'black');
			if($options{'plotVerticalAxis'})
			{
					# It is okay to plot the y axis. Set the location of the vertical axis.
					$graphRef->v_axis($ra_axes->[0],'black');
					$verticalAxisLevel   = $ra_axes->[0];
			}
			$horizontalAxisLevel = $ra_axes->[1];
	}

	if (defined($options{grid})) {   #   draw grid
	    my $xdiv = ( ${$options{'grid'}}[0]) ? ${$options{'grid'}}[0] : 8; # number of ticks (8 is default)
	    my $ydiv = ( ${$options{'grid'}}[1] )  ? ${$options{'grid'}}[1] : 8;
		my $x_delta = ($graphRef->xmax -  $graphRef->xmin)/$xdiv;
	    my $y_delta = ($graphRef->ymax -  $graphRef->ymin)/$ydiv;
	    my $i; my @x_values=(); my @y_values=();
	    foreach $i (1..($xdiv-1) ) {
	    	push( @x_values, $i*$x_delta+$graphRef->{xmin});
	    }
	    foreach $i (1..($ydiv-1) ) {
	    	push( @y_values, $i*$y_delta+$graphRef->{ymin});
	    }
		$graphRef->v_grid('gray',@x_values);
		$graphRef->h_grid('gray',@y_values);

			if($options{'plotVerticalAxis'})
			{
					# Set the labels associated with the vertical axis
					$graphRef->lb(new Label($verticalAxisLevel,$y_delta,
																	sprintf("%1.1f",$y_delta),'black','center','middle'));
					$graphRef->lb(new Label($verticalAxisLevel,$ymax,$ymax,'black','top'));
					$graphRef->lb(new Label($verticalAxisLevel,$ymin,$ymin,'black','bottom','right'));
			}

			# Add the labels for the horizontal axis
			$graphRef->lb(new Label($x_delta,$horizontalAxisLevel,
															sprintf("%1.1f",$x_delta),'black','center','middle'));
			$graphRef->lb(new Label($xmax,$horizontalAxisLevel,$xmax,'black','right'));
			$graphRef->lb(new Label($xmin,$horizontalAxisLevel,$xmin,'black','left'));

	} elsif ($options{ticks}) {   #   draw ticks -- grid over rides ticks

			my $xdiv = ${$options{ticks}}[0]? ${$options{ticks}}[0] : 8; # number of ticks (8 is default)
			my $ydiv = ${$options{ticks}}[1]? ${$options{ticks}}[1] : 8;
			my $x_delta = ($graphRef->xmax -  $graphRef->xmin)/$xdiv;
			my $y_delta = ($graphRef->ymax -  $graphRef->ymin)/$ydiv;
			my $i; 
			my @x_values=();
			my @y_values=();
			foreach $i (1..($xdiv-1) ) {
					push( @x_values, $i*$x_delta+$graphRef->{xmin});
			}
			foreach $i (1..($ydiv-1) ) {
					push( @y_values, $i*$y_delta+$graphRef->{ymin});
			}

			if($options{'plotVerticalAxis'})
			{
					# Add the labels associated with the vertical axis
					$graphRef->v_ticks($verticalAxisLevel  ,'black',@y_values);
					foreach (@y_values){
						$graphRef->lb(new Label($verticalAxisLevel, $_, $_,'black','middle','right'));
					}
					$graphRef->lb(new Label($verticalAxisLevel,$ymax,$ymax,'black','top','right'));
					# $graphRef->lb(new Label($verticalAxisLevel,$ymin+($ydiv/2)*$y_delta,
					# 												$ymin+($ydiv/2)*$y_delta,'black','top'));
					# $graphRef->lb(new Label($verticalAxisLevel,$ymax,$ymax,'black','top'));
					# $graphRef->lb(new Label($verticalAxisLevel,$ymin,$ymin,'black','bottom','right'));
			}

			# Add the labels for the horizontal axis
			$graphRef->h_ticks($horizontalAxisLevel,'black',@x_values);
			foreach (@x_values){
				$graphRef->lb(new Label($_, $horizontalAxisLevel, $_,'black','center'));
			}
			# $graphRef->lb(new Label($xmin+($xdiv/2)*$x_delta,$horizontalAxisLevel,
			# 												$xmin+($xdiv/2)*$x_delta,'black','center'));
			$graphRef->lb(new Label($xmax,$horizontalAxisLevel,$xmax,'black','right'));
			# $graphRef->lb(new Label($xmin,$horizontalAxisLevel,$xmin,'black','left'));
	}

	$graphRef;
}

##############################################################
#
#  Setup
#
#

Context("Numeric");

$coefA = random(1,5,1);#$rand_num_generator->random(1,5,1);
#warn $coefA;
$coefB = random(1,5,1);#$rand_num_generator->random(1,5,1);
#warn $coefB;
$coefC = random(1,5,1);#$rand_num_generator->random(1,5,1);
#warn $coefC;

if ($coefA % 2 == 0 && $coefB % 2 == 0 && $coefC % 2 == 0){
	$coefA = 3;
}
if ($coefA % 3 == 0 && $coefB % 3 == 0 && $coefC % 3 == 0){
	$coefA = 2;
}
if ($coefA % 5 == 0 && $coefB % 5 == 0 && $coefC % 5 == 0){
	$coefA = 3;
}

$startA = random(max($coefA,5),9,1) * 0.1;#$rand_num_generator->random(max($coefA,5),9,1) * 0.1;

$startB = random(max($coefB,6),9,1) * 0.1;#$rand_num_generator->random(max($coefB,6),9,1) * 0.1;

if ($startA == $startB){
	if ($startA == 0.9){
		$startA -= 0.1;
	} else {
		$startA += 0.1;
	}
}

$startC = 0;

$changeMin = max($coefA,$coefB,$coefC);

if ($changeMin == 5){
	$changeMin = 1;
} elsif ($changeMin == 4){
	$changeMin = 2;
} elsif ($changeMin == 3){
	$changeMin = 3;
} elsif ($changeMin == 2){
	$changeMin = 4;
}
$changeMin = random(1,$changeMin,1) * 0.1;

$graph = init_graphEX(-10, -0.1, 100, 1.0, 'ticks'=>[11,11], 'axes'=>[0,0], 'pixels'=>[400,400]);

$context = Context("Numeric");
$f1 = FEQ("($startA - ($changeMin*$coefA)) + ($changeMin*$coefA)*e^(-0.1*t) for t in [0, 100] using color:red and weight:2");
$f2 = FEQ("($startB - ($changeMin*$coefB)) + ($changeMin*$coefB)*e^(-0.1*t) for t in [0, 100] using color:orange and weight:2");
$f3 = FEQ("$changeMin*$coefC - e^(-.1*t)*$changeMin*$coefC for t in [0, 100] using color:blue and weight:2");

($fr1, $fr2, $fr3) = plot_functions( $graph,$f1,$f2,$f3);

$labelX =new Label(50,-0.075,"time (s)", 'black', 'center', 'middle');
$graph->lb($labelX);

$labelY =new Label(-8.5, 0.5,"Concentration (mol/L)", 'black', 'center', 'middle', 'vertical');
$graph->lb($labelY);

$endA = $startA - ($changeMin*$coefA);
$labelA = new Label(95, $endA, "A", 'red', 'right', 'bottom');
$graph->lb($labelA);

$endB = $startB - ($changeMin*$coefB);
$labelB = new Label(95, $endB, "B", 'orange', 'right', 'bottom');
$graph->lb($labelB);

$endC = $startC + ($changeMin*$coefC);
$labelC = new Label(95, $endC, "C", 'blue', 'right', 'top');
$graph->lb($labelC);

$context->variables->add(A=>'Real');
$context->variables->add(B=>'Real');
$context->variables->add(C=>'Real');
#Context("Numeric");#->variables->add("A", "B", "C");

$reactants = Formula("${coefA}A + ${coefB}B");
$products = Formula("${coefC}C");

$alt0 = "A plot with three curves is shown.  The x-axis is time and spans 0 to 100 seconds.  The y-axis
is concentration and spans 0 to 1.0 moles per liter.  Curve A starts at $startA molar at time zero and drops 
to level out at $endA molar at the end.  Curve B starts at $startB molar at time zero and drops 
to level out at $endB molar at the end.  Curve C starts at $startC molar at time zero and increases 
to level out at $endC molar at the end.";
##############################################################
#
#  Problem
#
#

BEGIN_PGML
Use the data and graph below to determine the balanced chemical equation:

[` \mathrm{[A]_0=[$startA]\,M\qquad [B]_0=[$startB]\,M\qquad [C]_0=[$startC]\,M}`]

[@ image(insertGraph($graph),width=>350,height=>350,extra_html_tags=>"alt='$alt0'") @]*

Type the equilibrium reaction below.  Just use coefficients and the reactants and products.  *Do NOT add states.*

**Balanced Reaction:**

[_________]{$reactants} [` \ce{<=>} `] [_________]{$products} 

END_PGML

$changeA = $startA-$endA;
$changeB = $startB-$endB;
$changeC = $endC-$startC;

$smallest = min($changeA,$changeB,$changeC);
BEGIN_PGML_SOLUTION

To find the equation, you need to understand how each reactant and product has changed.  Since the 
amount of C starts at zero, we can assume that this is going to be a product.  A and B will 
therefore be reactants.

Next, determine how much they have changed. The negative signs on the reactants make the change a 
positive one even though we're losing reactants.  This will make comparing the three values easier.


[```\mathrm{- \Delta[A] = -([$endA]\,M - [$startA]\,M) = [$changeA]\,M}```]

[```\mathrm{- \Delta[B] = -([$endB]\,M - [$startB]\,M) = [$changeB]\,M}```]

[```\mathrm{\Delta[C] = [$endC]\,M - [$startC]\,M = [$changeC]\,M}```]

This forms a ratio!  Simplify the ratio by dividing them all by the smallest of the three:

[```\mathrm{A}: \frac{[$changeA]}{[$smallest]} = [$changeA/$smallest] ```]

[```\mathrm{B}: \frac{[$changeB]}{[$smallest]} = [$changeB/$smallest] ```]

[```\mathrm{C}: \frac{[$changeC]}{[$smallest]} = [$changeC/$smallest] ```]

These are the coefficients for the reactants and products.

END_PGML_SOLUTION

ENDDOCUMENT();        
