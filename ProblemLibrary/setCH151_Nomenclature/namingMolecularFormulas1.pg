## DBsubject()
## DBchapter()
## DBsection()
## Level()
## KEYWORDS()
## TitleText1()
## EditionText1()
## AuthorText1()
## Section1()
## Problem1()
## Author('Stephanie Bryan')
## Institution('PCC')
## Language(en-US)

DOCUMENT();

############################################################
# Load Macros
############################################################
loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "PGunion.pl",
  "contextReaction.pl",
  "PGcourse.pl",
  "parserPopUp.pl",
  "answerHints.pl",
  "contextString.pl",
  "contextArbitraryString.pl"
);

############################################################
# Header
############################################################
#COMMENT('');
TEXT(beginproblem());

############################################################
# PG Setup
############################################################

Context("ArbitraryString");


@element = ("H", "O","C", "N", "F", "P", "S", "Cl", "Se", "Br", "I", "Si", "B");

@e1name = ("h","oxygen", "carbon", "nitrogen", "fluorine", "phosphorus", "sulfur", "chlorine", "selenium", "bromine", "iodine", "silicon", "boron");

@e2name = ("hydride", "oxide","carbide", "nitride", "fluoride", "phosphide", "sulfide", "chloride", "selenide", "bromide", "iodide");



my @numbers;
my @numbers2;
my %unique;
my %unique2;

for (0..6) {
    my $number = random(2,12);
    redo if $unique{$number}++;
    push @numbers, $number;
    }
    
for (0..6) {
    my $number2 = random(0,10);
    redo if $unique2{$number2}++;
    push @numbers2, $number2;
 }
 


foreach (0..6) {
    $i = $numbers[$_];
    $j = $numbers2[$_]; 
    
    while ($i == $j) {
        if ($j < 10) {
        $j++;
        }
        else {
        $i = 11;
        }
    }
    
    $e1[$_] = $element[$i];
    $e2[$_] = $element[$j];
    
    $asub[$_] = random(1,9);
    if ($asub[$_] == 1 && $j == 1) {
        $apref = "mon";
        }
    elsif ($asub[$_] == 1) {
        $apref = "mono";
        }
    elsif ($asub[$_] == 2) {
        $apref = "di";
        }
    elsif ($asub[$_] == 3) {
        $apref = "tri";
        }
    elsif ($asub[$_] == 4 && $j == 1) {
        $apref = "tetr";
        }
    elsif ($asub[$_] == 4) {
        $apref = "tetra";
        }
    elsif ($asub[$_] == 5 && $j == 1) {
        $apref = "pent";
        }
    elsif ($asub[$_] == 5) {
        $apref = "penta";
        }
    elsif ($asub[$_] == 6 && $j == 1) {
        $apref = "hex";
        } 
    elsif ($asub[$_] == 6) {
        $apref = "hexa";
        }
    elsif ($asub[$_] == 7 && $j == 1) {
        $apref = "hept";
        }
    elsif ($asub[$_] == 7) {
        $apref = "hepta";
        }
    elsif ($asub[$_] == 8 && $j == 1) {
        $apref = "oct";
        }
    elsif ($asub[$_] == 8) {
        $apref = "octa";
        }
    elsif ($asub[$_] == 9 && $j == 1) {
        $apref = "non";
        }
    elsif ($asub[$_] == 9) {
        $apref = "nona";
        }
    
    $csub[$_] = random(1,9);
    if ($csub[$_] == 1) {
        $cpref = "";
        }
    elsif ($csub[$_] == 2) {
        $cpref = "di";
        }
    elsif ($csub[$_] == 3) {
        $cpref = "tri";
        }
    elsif ($csub[$_] == 4) {
        $cpref = "tetra";
        }
    elsif ($csub[$_] == 5) {
        $cpref = "penta";
        }
    elsif ($csub[$_] == 6) {
        $cpref = "hexa";
        }
    elsif ($csub[$_] == 7) {
        $cpref = "hepta";
        }
    elsif ($csub[$_] == 8) {
        $cpref = "octa";
        }
    elsif ($csub[$_] == 9) {
        $cpref = "nona";
        }
    
    if ($csub[$_] == 1 && $asub[$_] == 1) {
        $formula[$_] = "$e1[$_] $e2[$_]";
        }
    elsif ($csub[$_] == 1) {
        $formula[$_] = "$e1[$_] ${e2[$_]}_$asub[$_]";
        }
    elsif ($asub[$_] == 1) {
        $formula[$_] = "${e1[$_]}_$csub[$_] $e2[$_]";
        }
    else {
        $formula[$_] = "${e1[$_]}_$csub[$_] ${e2[$_]}_$asub[$_]";
        }
        
    $answ[$_] = $cpref.$e1name[$i]." ".$apref.$e2name[$j];
    $answer[$_] = Compute($answ[$_])->cmp(
            checker => sub {
               my ($correct,$student,$ans) = @_;
               $correct = lc($correct->string);
               $student = lc($student->string); #changes both correct and student to                      # lowercase to compare so case doesn't matter
               $student =~ s/^~~s+|~~s+$//g;  # ~~ is backslash in PGML
               # the previous regex removes leading and trailing whitespace
               return $correct eq $student;
            });
    }


############################################################
# Body
############################################################

BEGIN_PGML
##Naming Binary Molecular Compounds

Write the name for the following formulas. Please note that these formulas may be fictional and used for naming practice only.  Please do not use the internet for naming but learn the IUPAC rules for naming.  

Formatting hints: Put a space between the first element name and the second element name. 
example: `C S_{2}`  carbon disulfide

a. `[$formula[0]]` [____________________]{$answer[0]} 

a. `[$formula[1]]` [____________________]{$answer[1]} 

a. `[$formula[2]]` [____________________]{$answer[2]} 

a. `[$formula[3]]` [____________________]{$answer[3]} 

a. `[$formula[4]]` [____________________]{$answer[4]} 

a. `[$formula[5]]` [____________________]{$answer[5]} 

a. `[$formula[6]]` [____________________]{$answer[6]} 





END_PGML
############################################################
#BEGIN_PGML_HINT




#END_PGML_HINT

############################################################


#BEGIN_PGML_SOLUTION



#END_PGML_SOLUTION

############################################################
# End Problem
############################################################




ENDDOCUMENT();

